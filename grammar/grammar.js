/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,8],$V2=[1,23],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,30],$V7=[1,24],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,21],$Vf=[1,22],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[5,10,11,16,17,19,26,33,36,37,38,39,40,41,50,51,57,58,59,60,61,63],$Vm=[1,36],$Vn=[13,26,30],$Vo=[27,29],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[1,51],$Vy=[1,50],$Vz=[1,52],$VA=[1,53],$VB=[1,54],$VC=[1,55],$VD=[13,18,25,27,29,31,42,43,44,45,46,47,48,49,51,52,53,54,55,56],$VE=[18,25,27],$VF=[2,19],$VG=[13,18,25,27,29,31,42,43,44,45,46,47,51,52,53,54,55,56],$VH=[5,10,11,16,17,19,21,26,33,36,37,38,39,40,41,50,51,57,58,59,60,61,63],$VI=[11,26,33,50,51,57,58,59,60,61],$VJ=[13,18,25,27,29,31,51,52,53,54,55,56],$VK=[13,18,25,27,29,31,53,54,55,56],$VL=[2,16],$VM=[1,109],$VN=[1,131],$VO=[25,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaravar":7,"declararreglo":8,"asignvar":9,"IF":10,"RPARIZQ":11,"expresion":12,"RPARDER":13,"bloque":14,"instrelse":15,"WHILE":16,"DO":17,"RPTCOMA":18,"FOR":19,"instrasnfor":20,"ELSE":21,"declara_tipo":22,"declaravar_2":23,"asign":24,"RCOMA":25,"RIDENTIFICADOR":26,"RIGUAL":27,"asignvar_2":28,"RPTOCOMA":29,"RCORIZQ":30,"RCORDER":31,"NEW":32,"RENTERO":33,"asignarray_2D":34,"asignarray":35,"INT":36,"STRING":37,"CHAR":38,"DOUBLE":39,"BOOLEAN":40,"VOID":41,"RELIGUAL":42,"RELDIFERENCIA":43,"RELMENOR":44,"RELMENORIGUAL":45,"RELMAYOR":46,"RELMAYORIGUAL":47,"ROR":48,"RAND":49,"RNOT":50,"RMENOS":51,"RMAS":52,"RMULTIPLICACION":53,"RDIVISION":54,"RPOTENCIA":55,"RMODULO":56,"RDECIMAL":57,"RCHAR":58,"RSTRING":59,"RTRUE":60,"RFALSE":61,"RLLAVEIZQ":62,"RLLAVEDER":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"IF",11:"RPARIZQ",13:"RPARDER",16:"WHILE",17:"DO",18:"RPTCOMA",19:"FOR",21:"ELSE",25:"RCOMA",26:"RIDENTIFICADOR",27:"RIGUAL",29:"RPTOCOMA",30:"RCORIZQ",31:"RCORDER",32:"NEW",33:"RENTERO",36:"INT",37:"STRING",38:"CHAR",39:"DOUBLE",40:"BOOLEAN",41:"VOID",42:"RELIGUAL",43:"RELDIFERENCIA",44:"RELMENOR",45:"RELMENORIGUAL",46:"RELMAYOR",47:"RELMAYORIGUAL",48:"ROR",49:"RAND",50:"RNOT",51:"RMENOS",52:"RMAS",53:"RMULTIPLICACION",54:"RDIVISION",55:"RPOTENCIA",56:"RMODULO",57:"RDECIMAL",58:"RCHAR",59:"RSTRING",60:"RTRUE",61:"RFALSE",62:"RLLAVEIZQ",63:"RLLAVEDER"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,6],[6,5],[6,7],[6,8],[20,1],[20,1],[15,6],[15,2],[15,0],[7,4],[23,3],[23,1],[24,5],[24,2],[24,0],[9,2],[28,3],[28,1],[8,16],[8,11],[8,11],[8,9],[34,5],[34,3],[35,3],[35,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[14,3],[14,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:$V1,11:$V2,12:20,16:$V3,17:$V4,19:$V5,22:12,26:$V6,28:13,33:$V7,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{1:[3]},{5:[1,31],6:32,7:5,8:6,9:7,10:$V1,11:$V2,12:20,16:$V3,17:$V4,19:$V5,22:12,26:$V6,28:13,33:$V7,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($Vl,[2,3]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),{11:[1,33]},{11:[1,34]},{14:35,62:$Vm},{11:[1,37]},{23:38,26:[1,39]},{27:[1,41],29:[1,40]},o($Vn,[2,34]),o($Vn,[2,35]),o($Vn,[2,36]),o($Vn,[2,37]),o($Vn,[2,38]),o($Vn,[2,39]),o($Vo,[2,25],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),{11:$V2,12:56,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:57,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:58,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,64]),o($VD,[2,65]),{1:[2,1]},o($Vl,[2,2]),{11:$V2,12:59,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:60,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{16:[1,61]},{2:$V0,4:62,6:3,7:5,8:6,9:7,10:$V1,11:$V2,12:20,16:$V3,17:$V4,19:$V5,22:12,26:$V6,28:13,33:$V7,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,63:[1,63]},{7:65,18:[1,66],20:64,22:67,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},{18:[2,22],24:68,25:[1,69],27:[1,70]},o($VE,$VF,{30:[1,71]}),o($Vl,[2,23]),{11:$V2,12:72,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:73,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:74,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:75,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:76,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:77,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:78,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:79,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:80,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:81,26:$V6,33:$V7,50:$Ve,51:$Vf,52:[1,82],57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:83,26:$V6,33:$V7,50:$Ve,51:[1,84],57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:85,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:86,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:87,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:$V2,12:88,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($VG,[2,48],{48:$Vv,49:$Vw}),o($VD,[2,49]),{13:[1,89],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{13:[1,90],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{13:[1,91],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{11:[1,92]},{6:32,7:5,8:6,9:7,10:$V1,11:$V2,12:20,16:$V3,17:$V4,19:$V5,22:12,26:$V6,28:13,33:$V7,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,63:[1,93]},o($VH,[2,67]),{11:$V2,12:94,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($VI,[2,12]),o($VI,[2,13]),{23:38,26:[1,95]},{18:[1,96]},{26:[1,97]},{11:[1,98],12:99,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{31:[1,100]},o($Vo,[2,24],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),o($VG,[2,40],{48:$Vv,49:$Vw}),o($VG,[2,41],{48:$Vv,49:$Vw}),o($VG,[2,42],{48:$Vv,49:$Vw}),o($VG,[2,43],{48:$Vv,49:$Vw}),o($VG,[2,44],{48:$Vv,49:$Vw}),o($VG,[2,45],{48:$Vv,49:$Vw}),o($VD,[2,46]),o([13,18,25,27,29,31,42,43,44,45,46,47,49,51,52,53,54,55,56],[2,47],{48:$Vv}),o($VJ,[2,50],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VD,[2,57]),o($VJ,[2,51],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VD,[2,58],{12:57,11:$V2,26:$V6,33:$V7,50:$Ve,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk}),o($VK,[2,52],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy}),o($VK,[2,53],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy}),o($VK,[2,54],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy}),o($VK,[2,55],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy}),o($VD,[2,56]),{14:101,62:$Vm},{14:102,62:$Vm},{11:$V2,12:103,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($VH,[2,66]),{18:[1,104],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},o($VE,$VF),o($Vl,[2,17]),o($VE,[2,18]),{11:$V2,12:58,22:105,26:$V6,33:$V7,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{18:[2,21],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{27:[1,107],30:[1,106]},o($Vl,$VL,{15:108,21:$VM}),o($Vl,[2,9]),{13:[1,110],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{11:$V2,12:111,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{13:[1,112]},{31:[1,113]},{30:[1,115],32:[1,114]},o($Vl,[2,8]),{10:[1,116],14:117,62:$Vm},{18:[1,118]},{13:[1,119],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{11:$V2,12:120,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{27:[1,121]},{22:122,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},{11:$V2,12:124,26:$V6,33:$V7,35:123,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{11:[1,125]},o($Vl,[2,15]),o($Vl,[2,10]),{14:126,62:$Vm},{18:[2,20],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{30:[1,128],32:[1,127]},{30:[1,129]},{25:$VN,31:[1,130]},o($VO,[2,33],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),{11:$V2,12:132,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($Vl,[2,11]),{22:133,36:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},{30:[1,135],34:134},{33:[1,136]},{18:[1,137]},{11:$V2,12:138,26:$V6,33:$V7,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{13:[1,139],42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},{30:[1,140]},{25:[1,142],31:[1,141]},{11:$V2,12:124,26:$V6,33:$V7,35:143,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},{31:[1,144]},o($Vl,[2,29]),o($VO,[2,32],{42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),o($Vl,$VL,{15:145,21:$VM}),{33:[1,146]},{18:[1,147]},{30:[1,148]},{25:$VN,31:[1,149]},{18:[1,150]},o($Vl,[2,14]),{31:[1,151]},o($Vl,[2,28]),{11:$V2,12:124,26:$V6,33:$V7,35:152,50:$Ve,51:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($VO,[2,31]),o($Vl,[2,27]),{30:[1,153]},{25:$VN,31:[1,154]},{33:[1,155]},o($VO,[2,30]),{31:[1,156]},{18:[1,157]},o($Vl,[2,26])],
defaultActions: {31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 36;
break;
case 1:return 39;
break;
case 2:return 40;
break;
case 3:return 38;
break;
case 4:return 37;
break;
case 5:return 32;
break;
case 6:return 41;
break;
case 7:return 10;
break;
case 8:return 21;
break;
case 9:return 'SWITCH';
break;
case 10:return 'CASE';
break;
case 11:return 'DEFAULT';
break;
case 12:return 'BREAK';
break;
case 13:return 16;
break;
case 14:return 19;
break;
case 15:return 17;
break;
case 16:return 'CONTINUE';
break;
case 17:return 'RETURN';
break;
case 18:return 'PRINTLN';
break;
case 19:return 'PRINT';
break;
case 20:return 'TOLOWER';
break;
case 21:return 'TOUPPER';
break;
case 22:return 'ROUND';
break;
case 23:return 'LENGTH';
break;
case 24:return 'TYPEOF';
break;
case 25:return 'TOSTRING';
break;
case 26:return 'TOCHARARRAY';
break;
case 27:return 'RUN';
break;
case 28:
break;
case 29:
break;
case 30:
break;
case 31:return 43;
break;
case 32:return 45;
break;
case 33:return 44;
break;
case 34:return 47;
break;
case 35:return 46;
break;
case 36:return 42;
break;
case 37:return 48;
break;
case 38:return 49;
break;
case 39:return 50;
break;
case 40:return 56;
break;
case 41:return 55;
break;
case 42:return 54;
break;
case 43:return 53;
break;
case 44:return 52;
break;
case 45:return 51;
break;
case 46:return 33;
break;
case 47:return 57;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 59;
break;
case 51:return 58;
break;
case 52:return 62;
break;
case 53:return 63;
break;
case 54:return 11;
break;
case 55:return 13;
break;
case 56:return 30;
break;
case 57:return 31;
break;
case 58:return 18;
break;
case 59:return 25;
break;
case 60:return 'DOSPT';
break;
case 61:return 26;
break;
case 62:return 27;
break;
case 63:return 5;
break;
case 64: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:[ \r\t\n]+)/i,/^(?:\/\*([^\"])*\*\/)/i,/^(?:(\/)(\/)(.)*)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:(-)?[0-9]+\b)/i,/^(?:(-)?[0-9]+(\.[0-9]+)?\b)/i,/^(?:(true|1))/i,/^(?:(false|0))/i,/^(?:"([^\"|^\\]|\^|\\"|\\\\|\\n|\\t|\\')*")/i,/^(?:'([^\"|^\\]|\^|\\"|\\\\|\\n|\\t|\\')?')/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:[A-Za-z0-9_-]+)/i,/^(?:=)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}