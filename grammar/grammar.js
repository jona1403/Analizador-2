/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,8],$V2=[1,34],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,35],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,32],$Vo=[1,33],$Vp=[1,36],$Vq=[1,37],$Vr=[1,38],$Vs=[1,39],$Vt=[1,40],$Vu=[5,10,11,16,18,19,21,23,24,25,27,32,33,34,35,36,39,40,54,57,58,59,60,61,62,71,72,78,79,80,81,82],$Vv=[1,47],$Vw=[1,54],$Vx=[45,50,63,64,65,66,67,68,69,70,72,73,74,75,76,77],$Vy=[2,91],$Vz=[2,84],$VA=[13,27,37,51],$VB=[45,50],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,72],$VJ=[1,73],$VK=[1,75],$VL=[1,74],$VM=[1,76],$VN=[1,77],$VO=[1,78],$VP=[1,79],$VQ=[13,20,29,44,45,50,52,63,64,65,66,67,68,69,70,72,73,74,75,76,77],$VR=[1,98],$VS=[20,44,45],$VT=[2,44],$VU=[13,20,29,44,45,50,52,63,64,65,66,67,68,72,73,74,75,76,77],$VV=[5,10,11,16,18,19,21,23,24,25,27,32,33,34,35,36,39,40,46,54,57,58,59,60,61,62,71,72,78,79,80,81,82],$VW=[11,27,54,71,72,78,79,80,81,82],$VX=[13,44],$VY=[13,20,29,44,45,50,52,72,73,74,75,76,77],$VZ=[13,20,29,44,45,50,52,74,75,76,77],$V_=[2,41],$V$=[1,170],$V01=[39,40],$V11=[2,95],$V21=[1,208],$V31=[44,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaravar":7,"declararreglo":8,"asignvar":9,"IF":10,"RPARIZQ":11,"expresion":12,"RPARDER":13,"bloque":14,"instrelse":15,"SWITCH":16,"instrswitch":17,"WHILE":18,"DO":19,"RPTCOMA":20,"FOR":21,"instrasnfor":22,"BREAK":23,"CONTINUE":24,"RETURN":25,"instrreturn":26,"RIDENTIFICADOR":27,"instrparams":28,"DOSPT":29,"declara_tipo":30,"instrllamadas":31,"PRINT":32,"PRINTLN":33,"TOLOWER":34,"TOUPPER":35,"ROUND":36,"RLLAVEIZQ":37,"instruccionesswitch":38,"RLLAVEDER":39,"CASE":40,"bloquesw":41,"DEFAULT":42,"instrparamsllamadas":43,"RCOMA":44,"RIGUAL":45,"ELSE":46,"declaravar_2":47,"asign":48,"asignvar_2":49,"RPTOCOMA":50,"RCORIZQ":51,"RCORDER":52,"NEW":53,"RENTERO":54,"asignarray_2D":55,"asignarray":56,"INT":57,"STRING":58,"CHAR":59,"DOUBLE":60,"BOOLEAN":61,"VOID":62,"RELIGUAL":63,"RELDIFERENCIA":64,"RELMENOR":65,"RELMENORIGUAL":66,"RELMAYOR":67,"RELMAYORIGUAL":68,"ROR":69,"RAND":70,"RNOT":71,"RMENOS":72,"RMAS":73,"RMULTIPLICACION":74,"RDIVISION":75,"RPOTENCIA":76,"RMODULO":77,"RDECIMAL":78,"RCHAR":79,"RSTRING":80,"RTRUE":81,"RFALSE":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"IF",11:"RPARIZQ",13:"RPARDER",16:"SWITCH",18:"WHILE",19:"DO",20:"RPTCOMA",21:"FOR",23:"BREAK",24:"CONTINUE",25:"RETURN",27:"RIDENTIFICADOR",29:"DOSPT",32:"PRINT",33:"PRINTLN",34:"TOLOWER",35:"TOUPPER",36:"ROUND",37:"RLLAVEIZQ",39:"RLLAVEDER",40:"CASE",42:"DEFAULT",44:"RCOMA",45:"RIGUAL",46:"ELSE",50:"RPTOCOMA",51:"RCORIZQ",52:"RCORDER",53:"NEW",54:"RENTERO",57:"INT",58:"STRING",59:"CHAR",60:"DOUBLE",61:"BOOLEAN",62:"VOID",63:"RELIGUAL",64:"RELDIFERENCIA",65:"RELMENOR",66:"RELMENORIGUAL",67:"RELMAYOR",68:"RELMAYORIGUAL",69:"ROR",70:"RAND",71:"RNOT",72:"RMENOS",73:"RMAS",74:"RMULTIPLICACION",75:"RDIVISION",76:"RPOTENCIA",77:"RMODULO",78:"RDECIMAL",79:"RCHAR",80:"RSTRING",81:"RTRUE",82:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,6],[6,5],[6,5],[6,7],[6,8],[6,2],[6,2],[6,3],[6,7],[6,2],[6,5],[6,5],[6,5],[6,5],[6,5],[17,3],[17,2],[38,5],[38,4],[38,3],[31,4],[31,3],[43,3],[43,1],[28,4],[28,2],[26,1],[26,0],[22,1],[22,4],[22,1],[15,7],[15,2],[15,0],[7,4],[47,3],[47,1],[48,5],[48,2],[48,0],[9,2],[49,3],[49,1],[8,16],[8,11],[8,11],[8,9],[55,5],[55,3],[56,3],[56,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[14,3],[14,2],[41,1],[41,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:$V1,11:$V2,12:31,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,30:23,31:17,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,49:24,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{1:[3]},{5:[1,41],6:42,7:5,8:6,9:7,10:$V1,11:$V2,12:31,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,30:23,31:17,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,49:24,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vu,[2,3]),o($Vu,[2,4]),o($Vu,[2,5]),o($Vu,[2,6]),o($Vu,[2,7]),{11:[1,43]},{11:[1,44]},{11:[1,45]},{14:46,37:$Vv},{11:[1,48]},{20:[1,49]},{20:[1,50]},{11:$V2,12:52,20:[2,35],26:51,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vx,$Vy,{11:[1,55]}),o($Vx,$Vz,{20:[1,56]}),{11:[1,57]},{11:[1,58]},{11:[1,59]},{11:[1,60]},{11:[1,61]},{27:[1,63],47:62},{45:[1,65],50:[1,64]},o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),o($VA,[2,63]),o($VA,[2,64]),o($VB,[2,50],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP}),{11:$V2,12:80,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:81,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:82,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VQ,[2,85]),o($VQ,[2,86]),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),{1:[2,1]},o($Vu,[2,2]),{11:$V2,12:83,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:84,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:85,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:[1,86]},{2:$V0,4:87,6:3,7:5,8:6,9:7,10:$V1,11:$V2,12:31,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,30:23,31:17,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,39:[1,88],49:24,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{7:90,20:[1,92],22:89,27:[1,91],30:93,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},o($Vu,[2,13]),o($Vu,[2,14]),{20:[1,94]},{20:[2,34],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},o($VQ,$Vz),o($VQ,$Vy,{11:[1,95]}),{11:$V2,12:100,13:$VR,27:$Vw,28:96,30:99,31:53,43:97,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vu,[2,17]),{11:$V2,12:101,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:102,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:103,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:104,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:105,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:[2,47],44:[1,107],45:[1,108],48:106},o($VS,$VT,{51:[1,109]}),o($Vu,[2,48]),{11:$V2,12:110,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:111,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:112,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:113,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:114,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:115,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:116,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:117,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:118,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:119,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,73:[1,120],78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:121,27:$Vw,31:53,54:$Vg,71:$Vn,72:[1,122],78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:123,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:124,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:125,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:$V2,12:126,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VU,[2,73],{69:$VI,70:$VJ}),o($VQ,[2,74]),{13:[1,127],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,128],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,129],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,130],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{11:[1,131]},{6:42,7:5,8:6,9:7,10:$V1,11:$V2,12:31,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,30:23,31:17,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,39:[1,132],49:24,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VV,[2,93]),{11:$V2,12:133,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VW,[2,36]),{45:[1,134]},o($VW,[2,38]),{27:[1,135],47:62},o($Vu,[2,15]),{11:$V2,12:100,13:$VR,27:$Vw,31:53,43:97,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{13:[1,136],44:[1,137]},{13:[1,138],44:[1,139]},o($VQ,[2,29]),{27:[1,140]},o($VX,[2,31],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP}),{13:[1,141],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,142],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,143],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,144],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{13:[1,145],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{20:[1,146]},{27:[1,147]},{11:[1,148],12:149,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{52:[1,150]},o($VB,[2,49],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP}),o($VU,[2,65],{69:$VI,70:$VJ}),o($VU,[2,66],{69:$VI,70:$VJ}),o($VU,[2,67],{69:$VI,70:$VJ}),o($VU,[2,68],{69:$VI,70:$VJ}),o($VU,[2,69],{69:$VI,70:$VJ}),o($VU,[2,70],{69:$VI,70:$VJ}),o($VQ,[2,71]),o([13,20,29,44,45,50,52,63,64,65,66,67,68,70,72,73,74,75,76,77],[2,72],{69:$VI}),o($VY,[2,75],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VQ,[2,82]),o($VY,[2,76],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VQ,[2,83],{31:53,12:81,11:$V2,27:$Vw,54:$Vg,71:$Vn,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt}),o($VZ,[2,77],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL}),o($VZ,[2,78],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL}),o($VZ,[2,79],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL}),o($VZ,[2,80],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL}),o($VQ,[2,81]),{14:151,37:$Vv},{17:152,37:[1,153]},{14:154,37:$Vv},{11:$V2,12:155,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VV,[2,92]),{20:[1,156],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{11:$V2,12:157,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VS,$VT),{29:[1,158]},{30:159,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},o($VQ,[2,28]),{11:$V2,12:160,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VX,[2,33]),{20:[1,161]},{20:[1,162]},{20:[1,163]},{20:[1,164]},{20:[1,165]},o($Vu,[2,42]),o($VS,[2,43]),{11:$V2,12:82,27:$Vw,30:166,31:53,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:[2,46],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{45:[1,168],51:[1,167]},o($Vu,$V_,{15:169,46:$V$}),o($Vu,[2,9]),{38:171,39:[1,172],40:[1,173],42:[1,174]},o($Vu,[2,10]),{13:[1,175],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{11:$V2,12:176,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:[1,177],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{30:178,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{27:[1,179]},o($VX,[2,30],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP}),o($Vu,[2,18]),o($Vu,[2,19]),o($Vu,[2,20]),o($Vu,[2,21]),o($Vu,[2,22]),{13:[1,180]},{52:[1,181]},{51:[1,183],53:[1,182]},o($Vu,[2,8]),{10:[1,184],14:185,37:$Vv},{39:[1,186],40:[1,187]},o($Vu,[2,24]),{11:$V2,12:188,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{29:[1,189]},{20:[1,190]},{13:[1,191],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},o($VW,[2,37]),{14:192,37:$Vv},o($VX,[2,32]),{11:$V2,12:193,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{45:[1,194]},{30:195,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{11:$V2,12:197,27:$Vw,31:53,54:$Vg,56:196,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:[1,198]},o($Vu,[2,40]),o($Vu,[2,23]),{11:$V2,12:199,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{29:[1,200],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},o($V01,$V11,{6:3,7:5,8:6,9:7,31:17,30:23,49:24,12:31,41:201,4:202,2:$V0,10:$V1,11:$V2,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt}),o($Vu,[2,11]),{14:203,37:$Vv},o($Vu,[2,16]),{20:[2,45],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},{51:[1,205],53:[1,204]},{51:[1,206]},{44:$V21,52:[1,207]},o($V31,[2,58],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP}),{11:$V2,12:209,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{29:[1,210],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},o($V01,$V11,{6:3,7:5,8:6,9:7,31:17,30:23,49:24,12:31,4:202,41:211,2:$V0,10:$V1,11:$V2,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt}),o($V01,[2,27]),o($V01,[2,94],{7:5,8:6,9:7,31:17,30:23,49:24,12:31,6:42,10:$V1,11:$V2,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt}),o($Vu,[2,12]),{30:212,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{51:[1,214],55:213},{54:[1,215]},{20:[1,216]},{11:$V2,12:217,27:$Vw,31:53,54:$Vg,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{13:[1,218],63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP},o($V01,$V11,{6:3,7:5,8:6,9:7,31:17,30:23,49:24,12:31,4:202,41:219,2:$V0,10:$V1,11:$V2,16:$V3,18:$V4,19:$V5,21:$V6,23:$V7,24:$V8,25:$V9,27:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt}),o($V01,[2,26]),{51:[1,220]},{44:[1,222],52:[1,221]},{11:$V2,12:197,27:$Vw,31:53,54:$Vg,56:223,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{52:[1,224]},o($Vu,[2,54]),o($V31,[2,57],{63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP}),{14:225,37:$Vv},o($V01,[2,25]),{54:[1,226]},{20:[1,227]},{51:[1,228]},{44:$V21,52:[1,229]},{20:[1,230]},o($Vu,$V_,{15:231,46:$V$}),{52:[1,232]},o($Vu,[2,53]),{11:$V2,12:197,27:$Vw,31:53,54:$Vg,56:233,71:$Vn,72:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($V31,[2,56]),o($Vu,[2,52]),o($Vu,[2,39]),{51:[1,234]},{44:$V21,52:[1,235]},{54:[1,236]},o($V31,[2,55]),{52:[1,237]},{20:[1,238]},o($Vu,[2,51])],
defaultActions: {41:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 57;
break;
case 1:return 60;
break;
case 2:return 61;
break;
case 3:return 59;
break;
case 4:return 58;
break;
case 5:return 53;
break;
case 6:return 62;
break;
case 7:return 10;
break;
case 8:return 46;
break;
case 9:return 16;
break;
case 10:return 40;
break;
case 11:return 42;
break;
case 12:return 23;
break;
case 13:return 18;
break;
case 14:return 21;
break;
case 15:return 19;
break;
case 16:return 24;
break;
case 17:return 25;
break;
case 18:return 33;
break;
case 19:return 32;
break;
case 20:return 34;
break;
case 21:return 35;
break;
case 22:return 36;
break;
case 23:return 'LENGTH';
break;
case 24:return 'TYPEOF';
break;
case 25:return 'TOSTRING';
break;
case 26:return 'TOCHARARRAY';
break;
case 27:return 'RUN';
break;
case 28:
break;
case 29:
break;
case 30:
break;
case 31:return 64;
break;
case 32:return 66;
break;
case 33:return 65;
break;
case 34:return 68;
break;
case 35:return 67;
break;
case 36:return 63;
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 71;
break;
case 40:return 77;
break;
case 41:return 76;
break;
case 42:return 75;
break;
case 43:return 74;
break;
case 44:return 73;
break;
case 45:return 72;
break;
case 46:return 54;
break;
case 47:return 78;
break;
case 48:return 81;
break;
case 49:return 82;
break;
case 50:return 80;
break;
case 51:return 79;
break;
case 52:return 37;
break;
case 53:return 39;
break;
case 54:return 11;
break;
case 55:return 13;
break;
case 56:return 51;
break;
case 57:return 52;
break;
case 58:return 20;
break;
case 59:return 44;
break;
case 60:return 29;
break;
case 61:return 27;
break;
case 62:return 45;
break;
case 63:return 5;
break;
case 64: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:[ \r\t\n]+)/i,/^(?:\/\*([^\"])*\*\/)/i,/^(?:(\/)(\/)(.)*)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:(-)?[0-9]+\b)/i,/^(?:(-)?[0-9]+(\.[0-9]+)?\b)/i,/^(?:(true|1))/i,/^(?:(false|0))/i,/^(?:"([^\"|^\\]|\^|\\"|\\\\|\\n|\\t|\\')*")/i,/^(?:'([^\"|^\\]|\^|\\"|\\\\|\\n|\\t|\\')?')/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:[A-Za-z0-9_-]+)/i,/^(?:=)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}